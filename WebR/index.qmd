---
title: "Hands-on Teaching with webR"
author: "Brian Cervantes Alvarez"
date: today
date-format: long
embed-resources: true
format:
  OSUStyle-revealjs:
    footer: "[https://bcervantesalvarez.github.io/Presentations/WebR](https://bcervantesalvarez.github.io/Presentations/WebR)"
    logo: "images/OSULogo.png"
    auto-stretch: true
    scrollable: true
    incremental: true
execute: 
  echo: true
  warning: false
webr:
  packages: ['ggplot2', 'dplyr'] # Install R packages on document open
  show-startup-message: false    # Disable displaying status of webR initialization
filters:
  - webr
---

## Traditional Teaching Methods {auto-animate="true"}

### Teaching Statistics with RStudio

-   Many statistics courses incorporate R for data analysis and visualization.
-   Typically, lectures cover statistical concepts, and practical workshops focus on R programming.
-   Including R programming examples in lectures can be challenging due to **window switching** and **limited student engagement.**

## Traditional Teaching Methods: *Screenshots and Code* {auto-animate="true"}

::: fragment

### Static Screenshot in RStudio 

![](images/example1.png)

:::


## Traditional Teaching Methods: *Screenshots and Code* {auto-animate="true"}


### Static Screenshot in RStudio 

![](images/example2.png)
![](images/example2_sol.png)




## Traditional Teaching Methods: *Screenshots and Code* {auto-animate="true"}

### Static Code in RStudio (Better)

```r
# Load necessary package
library(stats)

# Conduct a two-sample t-test
set.seed(123)
group_A <- rnorm(30, mean = 100, sd = 15)  # Sample data for group A
group_B <- rnorm(30, mean = 105, sd = 15)  # Sample data for group B

# Perform t-test
t.test(group_A, group_B)
```


## Traditional Teaching Methods: *Screenshots and Code* {auto-animate="true"}

### Static Code in RStudio (Better)


```r
# Load necessary package
library(stats)

# Conduct a two-sample t-test
set.seed(123)
group_A <- rnorm(30, mean = 100, sd = 15)  # Sample data for group A
group_B <- rnorm(30, mean = 105, sd = 15)  # Sample data for group B

# Perform t-test
t.test(group_A, group_B)
```

```{r}
#| echo: false
# Load necessary package
library(stats)

# Conduct a two-sample t-test
set.seed(123)
group_A <- rnorm(30, mean = 100, sd = 15)  # Sample data for group A
group_B <- rnorm(30, mean = 105, sd = 15)  # Sample data for group B

# Perform t-test
t.test(group_A, group_B)
```

## Traditional Teaching Methods: *Screenshots and Code* {auto-animate="true"}


### Code and Output

-   Code is usually shown as static screenshots or pre-written blocks.
-   Students struggle to follow along without hands-on practice.


## Traditional Teaching Methods: *Live Coding* {auto-animate="true"}

::::: columns
::: {.column width="60%"}
**Pros**

-   Shows the process of writing code
-   Teaches students how to debug code
-   Demonstrates good programming practices
:::

::: {.column width="40%"}
**Cons**

-   Switching between windows
-   More pressure as a demonstrator
-   Hard for students to run the code themselves
:::
:::::

::: fragment

This can be challenging for the instructor, as mistakes or technical issues during live coding can disrupt the lesson and hinder student understanding. If students are unfamiliar with programming languages like R, even small errors can cause confusion and negatively impact their learning experience.

:::

## Introducing webR {data-background="#fd7038" data-background-transition="zoom"}

### What is webR?

![](images/webR.webp){.absolute left="800" width="200" height="200"}

-   [webR](https://docs.r-wasm.org/webr/latest/) is a version of R that runs directly in a **web browser**.
-   It **eliminates** the need for [local installation or server setup]{style="text-decoration: underline;"}.
-   It just works (even on your phone).
-   Can be easily implemented using quarto.

## Why webR is a Game Changer {data-background="rgb(252, 149, 108)"}

-   `webR` transforms traditional lectures into dynamic and interactive sessions.
-   It helps maintain student interest and improves comprehension through hands-on practice.
-   Simplifies the teaching process, allowing instructors to focus on content delivery rather than technical setup.

## Benefits of webR {data-background="rgb(252, 149, 108)"}

-   Students can run code directly in the browser, fostering interactive learning.
-   No need for software installation, making it accessible to all students.
-   Ideal for live coding sessions, demonstrations, and exploratory data analysis.


## webR Demo 1 {auto-animate="true" data-background="rgb(252, 149, 108)"}

### Linear Regression

We'll first start with the webR team's demo example, the statistician's way of saying, "Hello world!"—linear regression:

```{webr-r}
# Run this simple linear regression with 
# mpg as the response, am 
fit = lm(mpg ~ am, data=mtcars)
summary(fit)

names(mtcars)
```

## webR Demo 1 {auto-animate="true" data-background="rgb(252, 149, 108)"}

### Linear Regression

You can continue your code from the previous slide! Just make sure you remember what variables you used!


```{webr-r}
# Run this code for magic to happen
coef(fit)
```

## webR Demo 2 {data-background="rgb(252, 149, 108)"}

### Summarize Data

Glancing at data frames:

```{webr-r}
data = mtcars
summary(data)
```

::: nonincremental
-   What would happen if you `plot(mtcars)`?
-   Find the overall average miles per gallon for all cars.
    -   Hint: Use `mean()`
:::

::: fragment
Advanced base R graphing:

```{webr-r}
x1 = seq(0, 1, length = 20)
y1 = rep(0, 20)
x2 = rep(0, 20)
y2 = seq(0.75, 0, length = 20)

plot(0, type = "n",
     axes = FALSE, ylab = "", xlab = "", 
     xlim = c(0, 1), ylim = c(0, 0.75), asp = 1,
     main = "Straight Lines as a Curve")

segments(x1, y1, x2, y2)
box(col = "grey")
```
:::

::: fragment
### `ggplot2` Example

Create a box plot with `ggplot2`:

```{webr-r}
# Plot
g <- ggplot(mpg, aes(x = class, y = cty))
g + geom_boxplot(varwidth=T, fill="plum") + 
    labs(title="Box plot", 
         subtitle="City Mileage grouped by Class of vehicle",
         caption="Source: mtcars dataset",
         x="Class of Vehicle",
         y="City Mileage") +
    theme_classic()
```
:::

## webR Demo 3 {data-background="rgb(252, 149, 108)"}

### Mixing Active and Non-Active R Code

For *if-else* statements:

``` r
if (...) {
  # Statements for TRUE
} else {
  # Statements for FALSE
}
```

::: nonincremental
-   `...` denotes a condition (either `TRUE` or `FALSE`).
-   If `TRUE`, the statements inside `{}` run.
-   Otherwise, the statements inside the `else` block run.
:::

::: fragment

Let's classify temperature to print "Hot!" or "Cold!":

```{webr-r}
temperature = 60

if (temperature > 76) {
  print("Hot!")
} else {
  print("Cold!")
}
```

:::

::: incremental
-   Change `temperature` to equal `80`
-   Add a new logic if-statement that converts Fahrenheit to Celusis
    -   *Hint: the conversion formula is `(32°F − 32) × 5/9 = 0°C`*
:::

## webR Browser {data-background="rgb(252, 149, 108)"}

<iframe src="https://webr.r-wasm.org/latest/" width="100%" height="600" allowfullscreen>

</iframe>

## What Can You Currently Do With webR? {data-background="rgb(252, 149, 108)"}

### Use Cases

-   Download R package datasets to .csv, .xlsx, etc., on-the-fly: [tidyverse.r-universe.dev/ggplot2](https://tidyverse.r-universe.dev/ggplot2)
-   Shiny apps without a server: [github.com/georgestagg/shiny-standalone-webr-demo](https://github.com/georgestagg/shiny-standalone-webr-demo)
-   Create interactive, engaging teaching materials (that work even in lecture environments).

::: fragment
### Current Limitations
:::

-   Not all R packages are properly supported/implemented yet (e.g. plotly, leaflet).
-   May take a few minutes to download all required packages for specific lecture highlights (varies by internet speed).
-   Time to render revealjs documents are longer (more for older machines).

## Summary {data-background="rgb(252, 149, 108)"}

`webR` offers a powerful tool for teaching statistics and data visualization. By enabling interactive coding directly within presentations, it enhances student engagement and simplifies the instructional process.

![](images/webR.webp){.absolute width="450" height="450" left="300"}

## References {data-background="rgb(252, 149, 108)"}

::: nonincremental
-   [webR Documentation](https://docs.r-wasm.org/webr/latest/)
-   [webR GitHub Repository](https://github.com/georgestagg/shiny-standalone-webr-demo)
-   [Slide Source Code](https://github.com/bcervantesalvarez/Presentations/blob/main/WebR/index.qmd)
:::

<iframe width="1200" height="600" src="https://www.youtube.com/embed/60i9f861HLg?si=nHSjycSMFw3vdsc-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen>

</iframe>


# Appendix

## Downloading & Setting Up webR {data-background="rgb(252, 149, 108)"}

### webR Documentation

Explore how webR can be embedded in a Quarto document for teaching R in the following links.

::: nonincremental
-   **WebR Website:** <https://docs.r-wasm.org/webr/latest/>
-   **WebR GitHub:** <https://github.com/r-wasm/webr/>
:::

### RStudio Guide To Deploying webR

<iframe width="1400" height="600" src="https://www.youtube.com/embed/DoRR2S5lLvk" frameborder="0" allowfullscreen></iframe>


